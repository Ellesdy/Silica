/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockDex, MockDexInterface } from "../../contracts/MockDex";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountOut",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608080604052346015576106df908161001b8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806369328dec146102e85780637b1837de146102a85763fe0291560361000e57608036600319011261019e5761005561034a565b6024356001600160a01b038116919082900361019e57604435918260011b9183830460021484151715610292576064358310610259576001600160a01b03168015610248576100a6843033846104a0565b81156101b7576040516370a0823160e01b8152306004820152602081602481865afa80156101ab578491600091610171575b5010610122577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235604060209561010f86338761045e565b81519081528587820152a3604051908152f35b60405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e74206f757470757420746f6b656e2062616c616e636044820152606560f81b6064820152608490fd5b9150506020813d6020116101a3575b8161018d60209383610360565b8101031261019e57839051386100d8565b600080fd5b3d9150610180565b6040513d6000823e3d90fd5b824710610203577ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe23560406020956101fe60008080808a335af16101f8610398565b506103d8565b61010f565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152606490fd5b6102548434101561041a565b6100a6565b60405162461bcd60e51b81526020600482015260116024820152700a6d8d2e0e0c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b604036600319011261019e576102bc61034a565b6001600160a01b031660243581156102db5761001991309033906104a0565b610019915034101561041a565b3461019e57606036600319011261019e5761030161034a565b6044356001600160a01b03811691602435919083820361019e576001600160a01b0316801561033457610019935061045e565b5050600080808093610019955af16101f8610398565b600435906001600160a01b038216820361019e57565b90601f8019910116810190811067ffffffffffffffff82111761038257604052565b634e487b7160e01b600052604160045260246000fd5b3d156103d3573d9067ffffffffffffffff821161038257604051916103c7601f8201601f191660200184610360565b82523d6000602084013e565b606090565b156103df57565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b1561042157565b60405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815261049e91610499606483610360565b6104e4565b565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261049e91610499608483610360565b604080519092610549926001600160a01b03169060009081906105078786610360565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602086015260208151910182855af1610543610398565b916105d9565b80519081159182156105b6575b5050156105605750565b5162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b819250906020918101031261019e5760200151801515810361019e573880610556565b9192901561063b57508151156105ed575090565b3b156105f65790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561064e5750805190602001fd5b6040519062461bcd60e51b8252602060048301528181519182602483015260005b8381106106915750508160006044809484010152601f80199101168101030190fd5b6020828201810151604487840101528593500161066f56fea2646970667358221220e0073898cfbff7d93cc826da31267ea39bde55f064d43c8591670612aeddd1c064736f6c634300081c0033";

type MockDexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDex__factory extends ContractFactory {
  constructor(...args: MockDexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDex & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockDex__factory {
    return super.connect(runner) as MockDex__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDexInterface {
    return new Interface(_abi) as MockDexInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockDex {
    return new Contract(address, _abi, runner) as unknown as MockDex;
  }
}
