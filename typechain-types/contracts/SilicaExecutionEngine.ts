/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SilicaExecutionEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "COMPUTE_PROVIDER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "addStake"
      | "assignRequest"
      | "completeRequest"
      | "computeProviders"
      | "createRequest"
      | "disputeRequest"
      | "failRequest"
      | "getProviderRequests"
      | "getRoleAdmin"
      | "getUserRequests"
      | "grantRole"
      | "hasRole"
      | "minimumStake"
      | "modelRegistry"
      | "paymentDistribution"
      | "providerRequests"
      | "registerComputeProvider"
      | "removeStake"
      | "renounceRole"
      | "requests"
      | "revokeRole"
      | "silicaToken"
      | "supportsInterface"
      | "treasury"
      | "updateComputeProvider"
      | "updateMinimumStake"
      | "updatePaymentDistribution"
      | "userRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComputeProviderRegistered"
      | "ComputeProviderStaked"
      | "ComputeProviderUnstaked"
      | "ComputeProviderUpdated"
      | "PaymentDistributionUpdated"
      | "RequestAssigned"
      | "RequestCompleted"
      | "RequestCreated"
      | "RequestDisputed"
      | "RequestFailed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPUTE_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeProviders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "failRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modelRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providerRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComputeProvider",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "silicaToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateComputeProvider",
    values: [boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaymentDistribution",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequests",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "COMPUTE_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modelRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComputeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "silicaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateComputeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaymentDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequests",
    data: BytesLike
  ): Result;
}

export namespace ComputeProviderRegisteredEvent {
  export type InputTuple = [
    provider: AddressLike,
    name: string,
    endpoint: string
  ];
  export type OutputTuple = [provider: string, name: string, endpoint: string];
  export interface OutputObject {
    provider: string;
    name: string;
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeProviderStakedEvent {
  export type InputTuple = [provider: AddressLike, amount: BigNumberish];
  export type OutputTuple = [provider: string, amount: bigint];
  export interface OutputObject {
    provider: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeProviderUnstakedEvent {
  export type InputTuple = [provider: AddressLike, amount: BigNumberish];
  export type OutputTuple = [provider: string, amount: bigint];
  export interface OutputObject {
    provider: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeProviderUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    isActive: boolean,
    capacityGPUs: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    isActive: boolean,
    capacityGPUs: bigint
  ];
  export interface OutputObject {
    provider: string;
    isActive: boolean;
    capacityGPUs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentDistributionUpdatedEvent {
  export type InputTuple = [
    creatorShare: BigNumberish,
    providerShare: BigNumberish,
    protocolShare: BigNumberish
  ];
  export type OutputTuple = [
    creatorShare: bigint,
    providerShare: bigint,
    protocolShare: bigint
  ];
  export interface OutputObject {
    creatorShare: bigint;
    providerShare: bigint;
    protocolShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestAssignedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    computeProvider: AddressLike
  ];
  export type OutputTuple = [requestId: bigint, computeProvider: string];
  export interface OutputObject {
    requestId: bigint;
    computeProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCompletedEvent {
  export type InputTuple = [requestId: BigNumberish, outputDataHash: string];
  export type OutputTuple = [requestId: bigint, outputDataHash: string];
  export interface OutputObject {
    requestId: bigint;
    outputDataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestCreatedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    modelId: BigNumberish,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    modelId: bigint,
    requester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    modelId: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestDisputedEvent {
  export type InputTuple = [requestId: BigNumberish, reason: string];
  export type OutputTuple = [requestId: bigint, reason: string];
  export interface OutputObject {
    requestId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFailedEvent {
  export type InputTuple = [requestId: BigNumberish, reason: string];
  export type OutputTuple = [requestId: bigint, reason: string];
  export interface OutputObject {
    requestId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SilicaExecutionEngine extends BaseContract {
  connect(runner?: ContractRunner | null): SilicaExecutionEngine;
  waitForDeployment(): Promise<this>;

  interface: SilicaExecutionEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  COMPUTE_PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addStake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  assignRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeRequest: TypedContractMethod<
    [requestId: BigNumberish, outputData: string],
    [void],
    "nonpayable"
  >;

  computeProviders: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        providerAddress: string;
        name: string;
        endpoint: string;
        isActive: boolean;
        capacityGPUs: bigint;
        totalRequests: bigint;
        successfulRequests: bigint;
        failedRequests: bigint;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;

  createRequest: TypedContractMethod<
    [modelId: BigNumberish, inputData: string],
    [bigint],
    "payable"
  >;

  disputeRequest: TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  failRequest: TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  getProviderRequests: TypedContractMethod<
    [provider: AddressLike],
    [bigint[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserRequests: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  minimumStake: TypedContractMethod<[], [bigint], "view">;

  modelRegistry: TypedContractMethod<[], [string], "view">;

  paymentDistribution: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        creatorShare: bigint;
        providerShare: bigint;
        protocolShare: bigint;
      }
    ],
    "view"
  >;

  providerRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  registerComputeProvider: TypedContractMethod<
    [
      name: string,
      endpoint: string,
      capacityGPUs: BigNumberish,
      stakeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        modelId: bigint;
        requester: string;
        computeProvider: string;
        inputData: string;
        outputData: string;
        fee: bigint;
        createdAt: bigint;
        completedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  silicaToken: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateComputeProvider: TypedContractMethod<
    [isActive: boolean, capacityGPUs: BigNumberish, endpoint: string],
    [void],
    "nonpayable"
  >;

  updateMinimumStake: TypedContractMethod<
    [_minimumStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePaymentDistribution: TypedContractMethod<
    [
      _creatorShare: BigNumberish,
      _providerShare: BigNumberish,
      _protocolShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COMPUTE_PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignRequest"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, outputData: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computeProviders"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        providerAddress: string;
        name: string;
        endpoint: string;
        isActive: boolean;
        capacityGPUs: bigint;
        totalRequests: bigint;
        successfulRequests: bigint;
        failedRequests: bigint;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createRequest"
  ): TypedContractMethod<
    [modelId: BigNumberish, inputData: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "disputeRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "failRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProviderRequests"
  ): TypedContractMethod<[provider: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserRequests"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "modelRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentDistribution"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        creatorShare: bigint;
        providerShare: bigint;
        protocolShare: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "providerRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerComputeProvider"
  ): TypedContractMethod<
    [
      name: string,
      endpoint: string,
      capacityGPUs: BigNumberish,
      stakeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        modelId: bigint;
        requester: string;
        computeProvider: string;
        inputData: string;
        outputData: string;
        fee: bigint;
        createdAt: bigint;
        completedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "silicaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateComputeProvider"
  ): TypedContractMethod<
    [isActive: boolean, capacityGPUs: BigNumberish, endpoint: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinimumStake"
  ): TypedContractMethod<[_minimumStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePaymentDistribution"
  ): TypedContractMethod<
    [
      _creatorShare: BigNumberish,
      _providerShare: BigNumberish,
      _protocolShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ComputeProviderRegistered"
  ): TypedContractEvent<
    ComputeProviderRegisteredEvent.InputTuple,
    ComputeProviderRegisteredEvent.OutputTuple,
    ComputeProviderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ComputeProviderStaked"
  ): TypedContractEvent<
    ComputeProviderStakedEvent.InputTuple,
    ComputeProviderStakedEvent.OutputTuple,
    ComputeProviderStakedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeProviderUnstaked"
  ): TypedContractEvent<
    ComputeProviderUnstakedEvent.InputTuple,
    ComputeProviderUnstakedEvent.OutputTuple,
    ComputeProviderUnstakedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeProviderUpdated"
  ): TypedContractEvent<
    ComputeProviderUpdatedEvent.InputTuple,
    ComputeProviderUpdatedEvent.OutputTuple,
    ComputeProviderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentDistributionUpdated"
  ): TypedContractEvent<
    PaymentDistributionUpdatedEvent.InputTuple,
    PaymentDistributionUpdatedEvent.OutputTuple,
    PaymentDistributionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestAssigned"
  ): TypedContractEvent<
    RequestAssignedEvent.InputTuple,
    RequestAssignedEvent.OutputTuple,
    RequestAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RequestCompleted"
  ): TypedContractEvent<
    RequestCompletedEvent.InputTuple,
    RequestCompletedEvent.OutputTuple,
    RequestCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RequestCreated"
  ): TypedContractEvent<
    RequestCreatedEvent.InputTuple,
    RequestCreatedEvent.OutputTuple,
    RequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestDisputed"
  ): TypedContractEvent<
    RequestDisputedEvent.InputTuple,
    RequestDisputedEvent.OutputTuple,
    RequestDisputedEvent.OutputObject
  >;
  getEvent(
    key: "RequestFailed"
  ): TypedContractEvent<
    RequestFailedEvent.InputTuple,
    RequestFailedEvent.OutputTuple,
    RequestFailedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ComputeProviderRegistered(address,string,string)": TypedContractEvent<
      ComputeProviderRegisteredEvent.InputTuple,
      ComputeProviderRegisteredEvent.OutputTuple,
      ComputeProviderRegisteredEvent.OutputObject
    >;
    ComputeProviderRegistered: TypedContractEvent<
      ComputeProviderRegisteredEvent.InputTuple,
      ComputeProviderRegisteredEvent.OutputTuple,
      ComputeProviderRegisteredEvent.OutputObject
    >;

    "ComputeProviderStaked(address,uint256)": TypedContractEvent<
      ComputeProviderStakedEvent.InputTuple,
      ComputeProviderStakedEvent.OutputTuple,
      ComputeProviderStakedEvent.OutputObject
    >;
    ComputeProviderStaked: TypedContractEvent<
      ComputeProviderStakedEvent.InputTuple,
      ComputeProviderStakedEvent.OutputTuple,
      ComputeProviderStakedEvent.OutputObject
    >;

    "ComputeProviderUnstaked(address,uint256)": TypedContractEvent<
      ComputeProviderUnstakedEvent.InputTuple,
      ComputeProviderUnstakedEvent.OutputTuple,
      ComputeProviderUnstakedEvent.OutputObject
    >;
    ComputeProviderUnstaked: TypedContractEvent<
      ComputeProviderUnstakedEvent.InputTuple,
      ComputeProviderUnstakedEvent.OutputTuple,
      ComputeProviderUnstakedEvent.OutputObject
    >;

    "ComputeProviderUpdated(address,bool,uint256)": TypedContractEvent<
      ComputeProviderUpdatedEvent.InputTuple,
      ComputeProviderUpdatedEvent.OutputTuple,
      ComputeProviderUpdatedEvent.OutputObject
    >;
    ComputeProviderUpdated: TypedContractEvent<
      ComputeProviderUpdatedEvent.InputTuple,
      ComputeProviderUpdatedEvent.OutputTuple,
      ComputeProviderUpdatedEvent.OutputObject
    >;

    "PaymentDistributionUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PaymentDistributionUpdatedEvent.InputTuple,
      PaymentDistributionUpdatedEvent.OutputTuple,
      PaymentDistributionUpdatedEvent.OutputObject
    >;
    PaymentDistributionUpdated: TypedContractEvent<
      PaymentDistributionUpdatedEvent.InputTuple,
      PaymentDistributionUpdatedEvent.OutputTuple,
      PaymentDistributionUpdatedEvent.OutputObject
    >;

    "RequestAssigned(uint256,address)": TypedContractEvent<
      RequestAssignedEvent.InputTuple,
      RequestAssignedEvent.OutputTuple,
      RequestAssignedEvent.OutputObject
    >;
    RequestAssigned: TypedContractEvent<
      RequestAssignedEvent.InputTuple,
      RequestAssignedEvent.OutputTuple,
      RequestAssignedEvent.OutputObject
    >;

    "RequestCompleted(uint256,string)": TypedContractEvent<
      RequestCompletedEvent.InputTuple,
      RequestCompletedEvent.OutputTuple,
      RequestCompletedEvent.OutputObject
    >;
    RequestCompleted: TypedContractEvent<
      RequestCompletedEvent.InputTuple,
      RequestCompletedEvent.OutputTuple,
      RequestCompletedEvent.OutputObject
    >;

    "RequestCreated(uint256,uint256,address)": TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;
    RequestCreated: TypedContractEvent<
      RequestCreatedEvent.InputTuple,
      RequestCreatedEvent.OutputTuple,
      RequestCreatedEvent.OutputObject
    >;

    "RequestDisputed(uint256,string)": TypedContractEvent<
      RequestDisputedEvent.InputTuple,
      RequestDisputedEvent.OutputTuple,
      RequestDisputedEvent.OutputObject
    >;
    RequestDisputed: TypedContractEvent<
      RequestDisputedEvent.InputTuple,
      RequestDisputedEvent.OutputTuple,
      RequestDisputedEvent.OutputObject
    >;

    "RequestFailed(uint256,string)": TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;
    RequestFailed: TypedContractEvent<
      RequestFailedEvent.InputTuple,
      RequestFailedEvent.OutputTuple,
      RequestFailedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
