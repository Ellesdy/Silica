/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SilicaAIOracle {
  export type EconomicIndicatorStruct = {
    timestamp: BigNumberish;
    name: string;
    value: BigNumberish;
    previousValue: BigNumberish;
    change: BigNumberish;
  };

  export type EconomicIndicatorStructOutput = [
    timestamp: bigint,
    name: string,
    value: bigint,
    previousValue: bigint,
    change: bigint
  ] & {
    timestamp: bigint;
    name: string;
    value: bigint;
    previousValue: bigint;
    change: bigint;
  };

  export type AIInsightStruct = {
    timestamp: BigNumberish;
    insightType: string;
    summary: string;
    data: string;
    confidence: BigNumberish;
  };

  export type AIInsightStructOutput = [
    timestamp: bigint,
    insightType: string,
    summary: string,
    data: string,
    confidence: bigint
  ] & {
    timestamp: bigint;
    insightType: string;
    summary: string;
    data: string;
    confidence: bigint;
  };

  export type MarketDataStruct = {
    timestamp: BigNumberish;
    symbol: string;
    price: BigNumberish;
    sentiment: BigNumberish;
    volatility: BigNumberish;
    predictiveTrend: string;
  };

  export type MarketDataStructOutput = [
    timestamp: bigint,
    symbol: string,
    price: bigint,
    sentiment: bigint,
    volatility: bigint,
    predictiveTrend: string
  ] & {
    timestamp: bigint;
    symbol: string;
    price: bigint;
    sentiment: bigint;
    volatility: bigint;
    predictiveTrend: string;
  };
}

export interface SilicaAIOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ORACLE_PROVIDER_ROLE"
      | "addAIInsight"
      | "addEconomicIndicator"
      | "addInsightType"
      | "addOracleProvider"
      | "addSymbol"
      | "economicIndicators"
      | "getAllEconomicIndicators"
      | "getAllInsightTypes"
      | "getAllSymbols"
      | "getEconomicData"
      | "getInsightsByType"
      | "getMarketData"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "insightTypes"
      | "insightsByType"
      | "latestEconomicData"
      | "latestMarketData"
      | "removeOracleProvider"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "trackingSymbols"
      | "updateEconomicData"
      | "updateMarketData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIInsightAdded"
      | "EconomicDataUpdated"
      | "EconomicIndicatorAdded"
      | "InsightTypeAdded"
      | "MarketDataUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SymbolAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAIInsight",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addEconomicIndicator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addInsightType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "addSymbol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "economicIndicators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEconomicIndicators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInsightTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEconomicData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsightsByType",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insightTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insightsByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestEconomicData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trackingSymbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEconomicData",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketData",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAIInsight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEconomicIndicator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInsightType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "economicIndicators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEconomicIndicators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInsightTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEconomicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsightsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insightTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insightsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestEconomicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackingSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEconomicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketData",
    data: BytesLike
  ): Result;
}

export namespace AIInsightAddedEvent {
  export type InputTuple = [
    insightType: string,
    summary: string,
    confidence: BigNumberish
  ];
  export type OutputTuple = [
    insightType: string,
    summary: string,
    confidence: bigint
  ];
  export interface OutputObject {
    insightType: string;
    summary: string;
    confidence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EconomicDataUpdatedEvent {
  export type InputTuple = [
    name: string,
    value: BigNumberish,
    change: BigNumberish
  ];
  export type OutputTuple = [name: string, value: bigint, change: bigint];
  export interface OutputObject {
    name: string;
    value: bigint;
    change: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EconomicIndicatorAddedEvent {
  export type InputTuple = [name: string];
  export type OutputTuple = [name: string];
  export interface OutputObject {
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsightTypeAddedEvent {
  export type InputTuple = [insightType: string];
  export type OutputTuple = [insightType: string];
  export interface OutputObject {
    insightType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketDataUpdatedEvent {
  export type InputTuple = [
    symbol: string,
    price: BigNumberish,
    sentiment: BigNumberish,
    volatility: BigNumberish
  ];
  export type OutputTuple = [
    symbol: string,
    price: bigint,
    sentiment: bigint,
    volatility: bigint
  ];
  export interface OutputObject {
    symbol: string;
    price: bigint;
    sentiment: bigint;
    volatility: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SymbolAddedEvent {
  export type InputTuple = [symbol: string];
  export type OutputTuple = [symbol: string];
  export interface OutputObject {
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SilicaAIOracle extends BaseContract {
  connect(runner?: ContractRunner | null): SilicaAIOracle;
  waitForDeployment(): Promise<this>;

  interface: SilicaAIOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  addAIInsight: TypedContractMethod<
    [
      insightType: string,
      summary: string,
      data: string,
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addEconomicIndicator: TypedContractMethod<
    [name: string],
    [void],
    "nonpayable"
  >;

  addInsightType: TypedContractMethod<
    [insightType: string],
    [void],
    "nonpayable"
  >;

  addOracleProvider: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  addSymbol: TypedContractMethod<[symbol: string], [void], "nonpayable">;

  economicIndicators: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getAllEconomicIndicators: TypedContractMethod<[], [string[]], "view">;

  getAllInsightTypes: TypedContractMethod<[], [string[]], "view">;

  getAllSymbols: TypedContractMethod<[], [string[]], "view">;

  getEconomicData: TypedContractMethod<
    [name: string],
    [SilicaAIOracle.EconomicIndicatorStructOutput],
    "view"
  >;

  getInsightsByType: TypedContractMethod<
    [insightType: string, start: BigNumberish, count: BigNumberish],
    [SilicaAIOracle.AIInsightStructOutput[]],
    "view"
  >;

  getMarketData: TypedContractMethod<
    [symbol: string],
    [SilicaAIOracle.MarketDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  insightTypes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  insightsByType: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        timestamp: bigint;
        insightType: string;
        summary: string;
        data: string;
        confidence: bigint;
      }
    ],
    "view"
  >;

  latestEconomicData: TypedContractMethod<
    [arg0: string],
    [
      [bigint, string, bigint, bigint, bigint] & {
        timestamp: bigint;
        name: string;
        value: bigint;
        previousValue: bigint;
        change: bigint;
      }
    ],
    "view"
  >;

  latestMarketData: TypedContractMethod<
    [arg0: string],
    [
      [bigint, string, bigint, bigint, bigint, string] & {
        timestamp: bigint;
        symbol: string;
        price: bigint;
        sentiment: bigint;
        volatility: bigint;
        predictiveTrend: string;
      }
    ],
    "view"
  >;

  removeOracleProvider: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  trackingSymbols: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  updateEconomicData: TypedContractMethod<
    [name: string, value: BigNumberish, previousValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMarketData: TypedContractMethod<
    [
      symbol: string,
      price: BigNumberish,
      sentiment: BigNumberish,
      volatility: BigNumberish,
      predictiveTrend: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAIInsight"
  ): TypedContractMethod<
    [
      insightType: string,
      summary: string,
      data: string,
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEconomicIndicator"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addInsightType"
  ): TypedContractMethod<[insightType: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addOracleProvider"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSymbol"
  ): TypedContractMethod<[symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "economicIndicators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllEconomicIndicators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllInsightTypes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllSymbols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEconomicData"
  ): TypedContractMethod<
    [name: string],
    [SilicaAIOracle.EconomicIndicatorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInsightsByType"
  ): TypedContractMethod<
    [insightType: string, start: BigNumberish, count: BigNumberish],
    [SilicaAIOracle.AIInsightStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketData"
  ): TypedContractMethod<
    [symbol: string],
    [SilicaAIOracle.MarketDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "insightTypes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "insightsByType"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        timestamp: bigint;
        insightType: string;
        summary: string;
        data: string;
        confidence: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestEconomicData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, string, bigint, bigint, bigint] & {
        timestamp: bigint;
        name: string;
        value: bigint;
        previousValue: bigint;
        change: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestMarketData"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, string, bigint, bigint, bigint, string] & {
        timestamp: bigint;
        symbol: string;
        price: bigint;
        sentiment: bigint;
        volatility: bigint;
        predictiveTrend: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeOracleProvider"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "trackingSymbols"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateEconomicData"
  ): TypedContractMethod<
    [name: string, value: BigNumberish, previousValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketData"
  ): TypedContractMethod<
    [
      symbol: string,
      price: BigNumberish,
      sentiment: BigNumberish,
      volatility: BigNumberish,
      predictiveTrend: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AIInsightAdded"
  ): TypedContractEvent<
    AIInsightAddedEvent.InputTuple,
    AIInsightAddedEvent.OutputTuple,
    AIInsightAddedEvent.OutputObject
  >;
  getEvent(
    key: "EconomicDataUpdated"
  ): TypedContractEvent<
    EconomicDataUpdatedEvent.InputTuple,
    EconomicDataUpdatedEvent.OutputTuple,
    EconomicDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EconomicIndicatorAdded"
  ): TypedContractEvent<
    EconomicIndicatorAddedEvent.InputTuple,
    EconomicIndicatorAddedEvent.OutputTuple,
    EconomicIndicatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "InsightTypeAdded"
  ): TypedContractEvent<
    InsightTypeAddedEvent.InputTuple,
    InsightTypeAddedEvent.OutputTuple,
    InsightTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "MarketDataUpdated"
  ): TypedContractEvent<
    MarketDataUpdatedEvent.InputTuple,
    MarketDataUpdatedEvent.OutputTuple,
    MarketDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SymbolAdded"
  ): TypedContractEvent<
    SymbolAddedEvent.InputTuple,
    SymbolAddedEvent.OutputTuple,
    SymbolAddedEvent.OutputObject
  >;

  filters: {
    "AIInsightAdded(string,string,uint256)": TypedContractEvent<
      AIInsightAddedEvent.InputTuple,
      AIInsightAddedEvent.OutputTuple,
      AIInsightAddedEvent.OutputObject
    >;
    AIInsightAdded: TypedContractEvent<
      AIInsightAddedEvent.InputTuple,
      AIInsightAddedEvent.OutputTuple,
      AIInsightAddedEvent.OutputObject
    >;

    "EconomicDataUpdated(string,int256,int256)": TypedContractEvent<
      EconomicDataUpdatedEvent.InputTuple,
      EconomicDataUpdatedEvent.OutputTuple,
      EconomicDataUpdatedEvent.OutputObject
    >;
    EconomicDataUpdated: TypedContractEvent<
      EconomicDataUpdatedEvent.InputTuple,
      EconomicDataUpdatedEvent.OutputTuple,
      EconomicDataUpdatedEvent.OutputObject
    >;

    "EconomicIndicatorAdded(string)": TypedContractEvent<
      EconomicIndicatorAddedEvent.InputTuple,
      EconomicIndicatorAddedEvent.OutputTuple,
      EconomicIndicatorAddedEvent.OutputObject
    >;
    EconomicIndicatorAdded: TypedContractEvent<
      EconomicIndicatorAddedEvent.InputTuple,
      EconomicIndicatorAddedEvent.OutputTuple,
      EconomicIndicatorAddedEvent.OutputObject
    >;

    "InsightTypeAdded(string)": TypedContractEvent<
      InsightTypeAddedEvent.InputTuple,
      InsightTypeAddedEvent.OutputTuple,
      InsightTypeAddedEvent.OutputObject
    >;
    InsightTypeAdded: TypedContractEvent<
      InsightTypeAddedEvent.InputTuple,
      InsightTypeAddedEvent.OutputTuple,
      InsightTypeAddedEvent.OutputObject
    >;

    "MarketDataUpdated(string,uint256,int256,uint256)": TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;
    MarketDataUpdated: TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SymbolAdded(string)": TypedContractEvent<
      SymbolAddedEvent.InputTuple,
      SymbolAddedEvent.OutputTuple,
      SymbolAddedEvent.OutputObject
    >;
    SymbolAdded: TypedContractEvent<
      SymbolAddedEvent.InputTuple,
      SymbolAddedEvent.OutputTuple,
      SymbolAddedEvent.OutputObject
    >;
  };
}
