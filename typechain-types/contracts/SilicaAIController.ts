/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SilicaAIController {
  export type AIDecisionStruct = {
    timestamp: BigNumberish;
    decisionType: string;
    rationale: string;
    executionData: BytesLike;
  };

  export type AIDecisionStructOutput = [
    timestamp: bigint,
    decisionType: string,
    rationale: string,
    executionData: string
  ] & {
    timestamp: bigint;
    decisionType: string;
    rationale: string;
    executionData: string;
  };
}

export interface SilicaAIControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AI_OPERATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "HUMAN_ADMIN_ROLE"
      | "addAIOperator"
      | "burnTokensFromTreasury"
      | "buyThreshold"
      | "decisionCount"
      | "decisions"
      | "executeDecision"
      | "executeTrade"
      | "getDecisions"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "lastDecisionTimestamp"
      | "maxTradePercentage"
      | "mintTokens"
      | "removeAIOperator"
      | "renounceRole"
      | "revokeRole"
      | "sellThreshold"
      | "silicaToken"
      | "supportsInterface"
      | "treasury"
      | "updateThresholds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecisionExecuted"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ThresholdsUpdated"
      | "TokensBurned"
      | "TokensMinted"
      | "TradeExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AI_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HUMAN_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAIOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTokensFromTreasury",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decisionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decisions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecision",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecisions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDecisionTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTradePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAIOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "silicaToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateThresholds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AI_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HUMAN_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAIOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnTokensFromTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decisionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decisions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDecisionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTradePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAIOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "silicaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholds",
    data: BytesLike
  ): Result;
}

export namespace DecisionExecutedEvent {
  export type InputTuple = [
    decisionId: BigNumberish,
    decisionType: string,
    rationale: string
  ];
  export type OutputTuple = [
    decisionId: bigint,
    decisionType: string,
    rationale: string
  ];
  export interface OutputObject {
    decisionId: bigint;
    decisionType: string;
    rationale: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdsUpdatedEvent {
  export type InputTuple = [
    buyThreshold: BigNumberish,
    sellThreshold: BigNumberish,
    maxTradePercentage: BigNumberish
  ];
  export type OutputTuple = [
    buyThreshold: bigint,
    sellThreshold: bigint,
    maxTradePercentage: bigint
  ];
  export interface OutputObject {
    buyThreshold: bigint;
    sellThreshold: bigint;
    maxTradePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    rationale: string
  ];
  export type OutputTuple = [from: string, amount: bigint, rationale: string];
  export interface OutputObject {
    from: string;
    amount: bigint;
    rationale: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    rationale: string
  ];
  export type OutputTuple = [to: string, amount: bigint, rationale: string];
  export interface OutputObject {
    to: string;
    amount: bigint;
    rationale: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    rationale: string
  ];
  export type OutputTuple = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    rationale: string
  ];
  export interface OutputObject {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    rationale: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SilicaAIController extends BaseContract {
  connect(runner?: ContractRunner | null): SilicaAIController;
  waitForDeployment(): Promise<this>;

  interface: SilicaAIControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AI_OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  HUMAN_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addAIOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  burnTokensFromTreasury: TypedContractMethod<
    [amount: BigNumberish, rationale: string],
    [void],
    "nonpayable"
  >;

  buyThreshold: TypedContractMethod<[], [bigint], "view">;

  decisionCount: TypedContractMethod<[], [bigint], "view">;

  decisions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string] & {
        timestamp: bigint;
        decisionType: string;
        rationale: string;
        executionData: string;
      }
    ],
    "view"
  >;

  executeDecision: TypedContractMethod<
    [decisionType: string, rationale: string, executionData: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;

  executeTrade: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike,
      rationale: string
    ],
    [bigint],
    "nonpayable"
  >;

  getDecisions: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [SilicaAIController.AIDecisionStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  lastDecisionTimestamp: TypedContractMethod<[], [bigint], "view">;

  maxTradePercentage: TypedContractMethod<[], [bigint], "view">;

  mintTokens: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, rationale: string],
    [void],
    "nonpayable"
  >;

  removeAIOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sellThreshold: TypedContractMethod<[], [bigint], "view">;

  silicaToken: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateThresholds: TypedContractMethod<
    [
      _buyThreshold: BigNumberish,
      _sellThreshold: BigNumberish,
      _maxTradePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AI_OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HUMAN_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAIOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnTokensFromTreasury"
  ): TypedContractMethod<
    [amount: BigNumberish, rationale: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decisionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decisions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string] & {
        timestamp: bigint;
        decisionType: string;
        rationale: string;
        executionData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeDecision"
  ): TypedContractMethod<
    [decisionType: string, rationale: string, executionData: BytesLike],
    [[boolean, string] & { success: boolean; result: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike,
      rationale: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDecisions"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [SilicaAIController.AIDecisionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastDecisionTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTradePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTokens"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, rationale: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAIOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "silicaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateThresholds"
  ): TypedContractMethod<
    [
      _buyThreshold: BigNumberish,
      _sellThreshold: BigNumberish,
      _maxTradePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecisionExecuted"
  ): TypedContractEvent<
    DecisionExecutedEvent.InputTuple,
    DecisionExecutedEvent.OutputTuple,
    DecisionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdsUpdated"
  ): TypedContractEvent<
    ThresholdsUpdatedEvent.InputTuple,
    ThresholdsUpdatedEvent.OutputTuple,
    ThresholdsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokensMinted"
  ): TypedContractEvent<
    TokensMintedEvent.InputTuple,
    TokensMintedEvent.OutputTuple,
    TokensMintedEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;

  filters: {
    "DecisionExecuted(uint256,string,string)": TypedContractEvent<
      DecisionExecutedEvent.InputTuple,
      DecisionExecutedEvent.OutputTuple,
      DecisionExecutedEvent.OutputObject
    >;
    DecisionExecuted: TypedContractEvent<
      DecisionExecutedEvent.InputTuple,
      DecisionExecutedEvent.OutputTuple,
      DecisionExecutedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ThresholdsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;
    ThresholdsUpdated: TypedContractEvent<
      ThresholdsUpdatedEvent.InputTuple,
      ThresholdsUpdatedEvent.OutputTuple,
      ThresholdsUpdatedEvent.OutputObject
    >;

    "TokensBurned(address,uint256,string)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "TokensMinted(address,uint256,string)": TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;
    TokensMinted: TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;

    "TradeExecuted(address,address,uint256,uint256,string)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
  };
}
